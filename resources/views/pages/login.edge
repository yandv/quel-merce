@layout.app()
  @slot('main')
    <div
      x-data="AuthPage()"
      class="min-h-screen bg-gray-50 flex flex-col justify-center py-3 sm:px-6 lg:px-8"
    >
      <div class="sm:mx-auto sm:w-full sm:max-w-md">
        <div class="text-center">
          <a href="/" class="text-3xl font-bold text-orange-600">QuelMerce - AutoPeças</a>
          <h2
            class="mt-3 text-3xl font-extrabold text-gray-900"
            x-text="isLogin ? 'Entrar na sua conta' : 'Criar nova conta'"
          >
            Entrar na sua conta
          </h2>
          <button
            @click="toggleMode"
            class="mt-2 text-sm text-orange-600 hover:text-orange-500 font-medium"
            x-text="isLogin ? 'criar uma nova conta' : 'fazer login com uma conta existente'"
          >
            criar uma nova conta
          </button>
        </div>
      </div>

      <div class="mt-4 sm:mx-auto sm:w-full sm:max-w-md">
        <div class="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
          <!-- Mensagens de feedback -->
          <div x-show="errorMessage" class="mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded">
            <span x-text="errorMessage"></span>
          </div>

          <div
            x-show="successMessage"
            class="mb-4 p-3 bg-green-100 border border-green-400 text-green-700 rounded"
          >
            <span x-text="successMessage"></span>
          </div>

          <!-- Formulário de Login -->
          <form x-show="isLogin" @submit.prevent="handleLogin" class="space-y-2">
            <div>
              <label for="login-email" class="block text-sm font-medium text-gray-700">
                Email
              </label>
              <div class="mt-1">
                <input
                  id="login-email"
                  name="email"
                  type="email"
                  x-model="loginForm.email"
                  required
                  class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md placeholder-gray-400 focus:outline-none focus:ring-orange-500 focus:border-orange-500 sm:text-sm"
                  placeholder="Digite seu email"
                />
              </div>
            </div>

            <div>
              <label for="login-password" class="block text-sm font-medium text-gray-700">
                Senha
              </label>
              <div class="mt-1">
                <input
                  id="login-password"
                  name="password"
                  type="password"
                  x-model="loginForm.password"
                  required
                  class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md placeholder-gray-400 focus:outline-none focus:ring-orange-500 focus:border-orange-500 sm:text-sm"
                  placeholder="Digite sua senha"
                />
              </div>
            </div>

            <div class="flex items-center justify-between">
              <div class="flex items-center">
                <input
                  id="remember-me"
                  name="remember-me"
                  type="checkbox"
                  x-model="loginForm.rememberMe"
                  class="h-4 w-4 text-orange-600 focus:ring-orange-500 border-gray-300 rounded"
                />
                <label for="remember-me" class="ml-2 block text-sm text-gray-900">
                  Lembrar de mim
                </label>
              </div>

              <div class="text-sm">
                <a href="#" class="font-medium text-orange-600 hover:text-orange-500">
                  Esqueceu sua senha?
                </a>
              </div>
            </div>

            <div>
              <button
                type="submit"
                :disabled="isLoading"
                class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-orange-600 hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <span x-show="!isLoading">Entrar</span>
                <span x-show="isLoading" class="flex items-center">
                  <svg
                    class="animate-spin -ml-1 mr-3 h-5 w-5 text-white"
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                  >
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" />

                    <path
                      class="opacity-75"
                      fill="currentColor"
                      d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                    />

                  </svg>
                  Entrando...
                </span>
              </button>
            </div>
          </form>

          <!-- Formulário de Registro -->
          <form x-show="!isLogin" @submit.prevent="handleRegister" class="space-y-2">
            <div>
              <label for="register-name" class="block text-sm font-medium text-gray-700">
                Nome Completo
              </label>
              <div class="mt-1">
                <input
                  id="register-name"
                  name="fullName"
                  type="text"
                  x-model="registerForm.name"
                  required
                  class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md placeholder-gray-400 focus:outline-none focus:ring-orange-500 focus:border-orange-500 sm:text-sm"
                  placeholder="Digite seu nome completo"
                />
              </div>
            </div>

            <div>
              <label for="register-email" class="block text-sm font-medium text-gray-700">
                Email
              </label>
              <div class="mt-1">
                <input
                  id="register-email"
                  name="email"
                  type="email"
                  x-model="registerForm.email"
                  required
                  class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md placeholder-gray-400 focus:outline-none focus:ring-orange-500 focus:border-orange-500 sm:text-sm"
                  placeholder="Digite seu email"
                />
              </div>
            </div>

            <div>
              <label for="register-password" class="block text-sm font-medium text-gray-700">
                Senha
              </label>
              <div class="mt-1">
                <input
                  id="register-password"
                  name="password"
                  type="password"
                  x-model="registerForm.password"
                  required
                  class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md placeholder-gray-400 focus:outline-none focus:ring-orange-500 focus:border-orange-500 sm:text-sm"
                  placeholder="Digite sua senha"
                />
              </div>
            </div>

            <div>
              <label for="register-confirm-password" class="block text-sm font-medium text-gray-700">
                Confirmar Senha
              </label>
              <div class="mt-1">
                <input
                  id="register-confirm-password"
                  name="confirmPassword"
                  type="password"
                  x-model="registerForm.confirmPassword"
                  required
                  class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md placeholder-gray-400 focus:outline-none focus:ring-orange-500 focus:border-orange-500 sm:text-sm"
                  placeholder="Confirme sua senha"
                />
              </div>
              <p
                x-show="registerForm.password !== registerForm.confirmPassword && registerForm.confirmPassword"
                class="mt-1 text-sm text-red-600"
              >
                As senhas não coincidem
              </p>
            </div>

            <div>
              <button
                type="submit"
                :disabled="isLoading || registerForm.password !== registerForm.confirmPassword"
                class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-orange-600 hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <span x-show="!isLoading">Criar Conta</span>
                <span x-show="isLoading" class="flex items-center">
                  <svg
                    class="animate-spin -ml-1 mr-3 h-5 w-5 text-white"
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                  >
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" />

                    <path
                      class="opacity-75"
                      fill="currentColor"
                      d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                    />

                  </svg>
                  Criando conta...
                </span>
              </button>
            </div>
          </form>

          <!-- Divisor -->
          <div class="mt-2">
            <div class="relative">
              <!-- Linha -->
              <div class="absolute inset-0 flex items-center">
                <div class="w-full border-t border-gray-300">
                </div>
              </div>

              <!-- Texto central -->
              <div class="relative flex justify-center">
                <span class="px-2 bg-white text-sm text-gray-500">Ou continue com</span>
              </div>
            </div>

            <!-- Botão Google -->
            <div class="mt-3">
              <button
                @click="handleGoogleAuth"
                :disabled="isLoading"
                class="w-full inline-flex justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <svg class="w-5 h-5" viewBox="0 0 24 24">
                  <path
                    fill="#4285F4"
                    d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
                  />
                  <path
                    fill="#34A853"
                    d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
                  />
                  <path
                    fill="#FBBC05"
                    d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
                  />
                  <path
                    fill="#EA4335"
                    d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
                  />
                </svg>
                <span class="ml-2">Continuar com Google</span>
              </button>
            </div>
          </div>

          <!-- Termos de uso (apenas para registro) -->
          <div x-show="!isLogin" class="mt-6 text-center">
            <p class="text-xs text-gray-500">
              Ao criar uma conta, você concorda com nossos
              <a href="#" class="text-orange-600 hover:text-orange-500">Termos de Serviço</a>
              e
              <a href="#" class="text-orange-600 hover:text-orange-500">Política de Privacidade</a>
            </p>
          </div>
        </div>
      </div>
    </div>

    <script>
      function AuthPage() {
        return {
          isLogin: true,
          isLoading: false,
          errorMessage: "",
          successMessage: "",
          loginForm: {
            email: "",
            password: "",
            rememberMe: false
          },
          registerForm: {
            name: "",
            email: "",
            password: "",
            confirmPassword: ""
          },
          // Obter o parâmetro redirectTo da URL
          getRedirectUrl() {
            const urlParams = new URLSearchParams(window.location.search);
            return urlParams.get("redirectTo") || "/";
          },
          // Limpar mensagens
          clearMessages() {
            this.errorMessage = "";
            this.successMessage = "";
          },
          // Mostrar erro
          showError(message) {
            this.errorMessage = message;
            this.successMessage = "";
          },
          // Mostrar sucesso
          showSuccess(message) {
            this.successMessage = message;
            this.errorMessage = "";
          },
          toggleMode() {
            this.isLogin = !this.isLogin;
            this.clearMessages();
            // Limpar formulários ao trocar de modo
            this.loginForm = {
              email: "",
              password: "",
              rememberMe: false
            };
            this.registerForm = {
              name: "",
              email: "",
              password: "",
              confirmPassword: ""
            };
          },
          async handleLogin() {
            this.isLoading = true;
            this.clearMessages();
            try {
              const response = await fetch("/api/users/login", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                  Accept: "application/json",
                  "X-CSRF-TOKEN": document.querySelector('meta[name="csrf-token"]').content
                },
                body: JSON.stringify({
                  email: this.loginForm.email,
                  password: this.loginForm.password,
                  rememberMe: this.loginForm.rememberMe
                })
              });
              if (response.ok) {
                this.showSuccess("Login realizado com sucesso!");
                // Redirecionar após um breve delay para mostrar a mensagem
                setTimeout(() => {
                  window.location.href = "/verify-email?redirectTo=" + this.getRedirectUrl();
                }, 1e3);
              } else {
                const errorData = await response.json();
                this.showError(errorData.message || "Email ou senha inválidos.");
              }
            } catch (error) {
              console.error("Erro no login:", error);
              this.showError("Erro de conexão. Tente novamente.");
            } finally {
              this.isLoading = false;
            }
          },
          async handleRegister() {
            if (this.registerForm.password !== this.registerForm.confirmPassword) {
              this.showError("As senhas não coincidem");
              return;
            }
            this.isLoading = true;
            this.clearMessages();
            try {
              const response = await fetch("/api/users", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                  Accept: "application/json",
                  "X-CSRF-TOKEN": document.querySelector('meta[name="csrf-token"]').content
                },
                body: JSON.stringify({
                  fullName: this.registerForm.name,
                  email: this.registerForm.email,
                  password: this.registerForm.password
                })
              });
              if (response.ok) {
                this.showSuccess("Conta criada com sucesso! Você será redirecionado em breve.");
                setTimeout(() => {
                  window.location.href = this.getRedirectUrl();
                }, 1500);
              } else {
                const errorData = await response.json();
                if (errorData.errors) {
                  // Tratar erros de validação
                  const errorMessages = Object.values(errorData.errors).flat();
                  this.showError(errorMessages.join(", "));
                } else {
                  this.showError(errorData.message || "Erro ao criar conta. Tente novamente.");
                }
              }
            } catch (error) {
              console.error("Erro no registro:", error);
              this.showError("Erro de conexão. Tente novamente.");
            } finally {
              this.isLoading = false;
            }
          },
          async handleGoogleAuth() {
            this.isLoading = true;
            this.clearMessages();
            try {
              // Implementar autenticação Google quando disponível
              this.showError("Autenticação com Google ainda não está disponível.");
            } catch (error) {
              console.error("Erro na autenticação Google:", error);
              this.showError("Erro na autenticação Google. Tente novamente.");
            } finally {
              this.isLoading = false;
            }
          }
        };
      }
    </script>
  @endslot
@end
