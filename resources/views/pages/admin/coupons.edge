@layout.admin()
@slot('main')
<div class="p-6" x-data="couponManager()" x-init="init()">
  <div class="mb-6">
    <div class="flex items-center justify-between">
      <div>
        <h2 class="text-3xl font-bold text-gray-900">Cupons</h2>
        <p class="mt-1 text-sm text-gray-500">Gerencie cupons de desconto e promoções</p>
      </div>
      <button @click="openCreateModal()"
        class="bg-orange-600 text-white px-4 py-2 rounded-lg hover:bg-orange-700 transition-colors">
        <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
        </svg>
        Criar Cupom
      </button>
    </div>
  </div>

  <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
    <div class="bg-white p-6 rounded-lg shadow">
      <div class="flex items-center">
        <div class="p-2 bg-blue-100 rounded-lg">
          <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
              d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
          </svg>
        </div>
        <div class="ml-4">
          <p class="text-sm font-medium text-gray-500">Total de Cupons</p>
          <p class="text-2xl font-semibold text-gray-900" x-text="stats.total"></p>
        </div>
      </div>
    </div>

    <div class="bg-white p-6 rounded-lg shadow">
      <div class="flex items-center">
        <div class="p-2 bg-green-100 rounded-lg">
          <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
              d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        </div>
        <div class="ml-4">
          <p class="text-sm font-medium text-gray-500">Cupons Ativos</p>
          <p class="text-2xl font-semibold text-gray-900" x-text="stats.active"></p>
        </div>
      </div>
    </div>

    <div class="bg-white p-6 rounded-lg shadow">
      <div class="flex items-center">
        <div class="p-2 bg-yellow-100 rounded-lg">
          <svg class="w-6 h-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
              d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        </div>
        <div class="ml-4">
          <p class="text-sm font-medium text-gray-500">Expirando em 7 dias</p>
          <p class="text-2xl font-semibold text-gray-900" x-text="stats.expiringIn7Days"></p>
        </div>
      </div>
    </div>

    <div class="bg-white p-6 rounded-lg shadow">
      <div class="flex items-center">
        <div class="p-2 bg-purple-100 rounded-lg">
          <svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
          </svg>
        </div>
        <div class="ml-4">
          <p class="text-sm font-medium text-gray-500">Usos este mês</p>
          <p class="text-2xl font-semibold text-gray-900" x-text="stats.usagesThisMonth"></p>
        </div>
      </div>
    </div>
  </div>

  <template x-if="!loading">
    <div class="bg-white rounded-lg shadow">
      <div class="px-6 py-4 border-b border-gray-200">
        <div class="flex items-center justify-between">
          <h3 class="text-lg font-medium text-gray-900">Lista de Cupons</h3>
          <div class="flex items-center space-x-4">
            <div class="relative">
              <input type="text" x-model="searchQuery" @input.debounce.500ms="searchCoupons()"
                placeholder="Buscar cupons..."
                class="w-64 pl-10 pr-4 py-2.5 border border-gray-300 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-colors duration-200">
              <svg class="absolute left-3 top-3 w-4 h-4 text-gray-400" fill="none" stroke="currentColor"
                viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                  d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </div>
            <div class="relative">
              <select x-model="statusFilter" @change="searchCoupons()"
                class="px-3 py-2.5 pr-8 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-colors duration-200 appearance-none bg-white">
                <option value="">Todos os status</option>
                <option value="true">Ativo</option>
                <option value="false">Inativo</option>
              </select>
              <div class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
                <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                </svg>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                <button @click="toggleSort('code')"
                  class="flex items-center space-x-1 hover:text-gray-700 focus:outline-none focus:text-gray-700">
                  <span>Código</span>
                  <div class="flex items-center space-x-1">
                    <div class="flex flex-col">
                      <svg class="w-3 h-3" :class="getSortIcon('code', 'asc')" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd"
                          d="M14.707 12.707a1 1 0 01-1.414 0L10 9.414l-3.293 3.293a1 1 0 01-1.414-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 010 1.414z"
                          clip-rule="evenodd" />
                      </svg>
                      <svg class="w-3 h-3 -mt-1" :class="getSortIcon('code', 'desc')" fill="currentColor"
                        viewBox="0 0 20 20">
                        <path fill-rule="evenodd"
                          d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                          clip-rule="evenodd" />
                      </svg>
                    </div>
                    <span x-show="sortFields.length > 1 && getSortPriority('code') > 0" x-text="getSortPriority('code')"
                      class="w-4 h-4 bg-orange-600 text-white text-xs rounded-full flex items-center justify-center font-bold"
                      style="font-size: 10px;">
                    </span>
                  </div>
                </button>
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                <button @click="toggleSort('description')"
                  class="flex items-center space-x-1 hover:text-gray-700 focus:outline-none focus:text-gray-700">
                  <span>Descrição</span>
                  <div class="flex items-center space-x-1">
                    <div class="flex flex-col">
                      <svg class="w-3 h-3" :class="getSortIcon('description', 'asc')" fill="currentColor"
                        viewBox="0 0 20 20">
                        <path fill-rule="evenodd"
                          d="M14.707 12.707a1 1 0 01-1.414 0L10 9.414l-3.293 3.293a1 1 0 01-1.414-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 010 1.414z"
                          clip-rule="evenodd" />
                      </svg>
                      <svg class="w-3 h-3 -mt-1" :class="getSortIcon('description', 'desc')" fill="currentColor"
                        viewBox="0 0 20 20">
                        <path fill-rule="evenodd"
                          d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                          clip-rule="evenodd" />
                      </svg>
                    </div>
                    <span x-show="sortFields.length > 1 && getSortPriority('description') > 0"
                      x-text="getSortPriority('description')"
                      class="w-4 h-4 bg-orange-600 text-white text-xs rounded-full flex items-center justify-center font-bold"
                      style="font-size: 10px;">
                    </span>
                  </div>
                </button>
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                <button @click="toggleSort('discountType')"
                  class="flex items-center space-x-1 hover:text-gray-700 focus:outline-none focus:text-gray-700">
                  <span>Tipo</span>
                  <div class="flex items-center space-x-1">
                    <div class="flex flex-col">
                      <svg class="w-3 h-3" :class="getSortIcon('discountType', 'asc')" fill="currentColor"
                        viewBox="0 0 20 20">
                        <path fill-rule="evenodd"
                          d="M14.707 12.707a1 1 0 01-1.414 0L10 9.414l-3.293 3.293a1 1 0 01-1.414-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 010 1.414z"
                          clip-rule="evenodd" />
                      </svg>
                      <svg class="w-3 h-3 -mt-1" :class="getSortIcon('discountType', 'desc')" fill="currentColor"
                        viewBox="0 0 20 20">
                        <path fill-rule="evenodd"
                          d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                          clip-rule="evenodd" />
                      </svg>
                    </div>
                    <span x-show="sortFields.length > 1 && getSortPriority('discountType') > 0"
                      x-text="getSortPriority('discountType')"
                      class="w-4 h-4 bg-orange-600 text-white text-xs rounded-full flex items-center justify-center font-bold"
                      style="font-size: 10px;">
                    </span>
                  </div>
                </button>
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                <button @click="toggleSort('discountValue')"
                  class="flex items-center space-x-1 hover:text-gray-700 focus:outline-none focus:text-gray-700">
                  <span>Valor</span>
                  <div class="flex items-center space-x-1">
                    <div class="flex flex-col">
                      <svg class="w-3 h-3" :class="getSortIcon('discountValue', 'asc')" fill="currentColor"
                        viewBox="0 0 20 20">
                        <path fill-rule="evenodd"
                          d="M14.707 12.707a1 1 0 01-1.414 0L10 9.414l-3.293 3.293a1 1 0 01-1.414-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 010 1.414z"
                          clip-rule="evenodd" />
                      </svg>
                      <svg class="w-3 h-3 -mt-1" :class="getSortIcon('discountValue', 'desc')" fill="currentColor"
                        viewBox="0 0 20 20">
                        <path fill-rule="evenodd"
                          d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                          clip-rule="evenodd" />
                      </svg>
                    </div>
                    <span x-show="sortFields.length > 1 && getSortPriority('discountValue') > 0"
                      x-text="getSortPriority('discountValue')"
                      class="w-4 h-4 bg-orange-600 text-white text-xs rounded-full flex items-center justify-center font-bold"
                      style="font-size: 10px;">
                    </span>
                  </div>
                </button>
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                <button @click="toggleSort('usageCount')"
                  class="flex items-center space-x-1 hover:text-gray-700 focus:outline-none focus:text-gray-700">
                  <span>Usos</span>
                  <div class="flex items-center space-x-1">
                    <div class="flex flex-col">
                      <svg class="w-3 h-3" :class="getSortIcon('usageCount', 'asc')" fill="currentColor"
                        viewBox="0 0 20 20">
                        <path fill-rule="evenodd"
                          d="M14.707 12.707a1 1 0 01-1.414 0L10 9.414l-3.293 3.293a1 1 0 01-1.414-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 010 1.414z"
                          clip-rule="evenodd" />
                      </svg>
                      <svg class="w-3 h-3 -mt-1" :class="getSortIcon('usageCount', 'desc')" fill="currentColor"
                        viewBox="0 0 20 20">
                        <path fill-rule="evenodd"
                          d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                          clip-rule="evenodd" />
                      </svg>
                    </div>
                    <span x-show="sortFields.length > 1 && getSortPriority('usageCount') > 0"
                      x-text="getSortPriority('usageCount')"
                      class="w-4 h-4 bg-orange-600 text-white text-xs rounded-full flex items-center justify-center font-bold"
                      style="font-size: 10px;">
                    </span>
                  </div>
                </button>
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                <button @click="toggleSort('isActive')"
                  class="flex items-center space-x-1 hover:text-gray-700 focus:outline-none focus:text-gray-700">
                  <span>Status</span>
                  <div class="flex items-center space-x-1">
                    <div class="flex flex-col">
                      <svg class="w-3 h-3" :class="getSortIcon('isActive', 'asc')" fill="currentColor"
                        viewBox="0 0 20 20">
                        <path fill-rule="evenodd"
                          d="M14.707 12.707a1 1 0 01-1.414 0L10 9.414l-3.293 3.293a1 1 0 01-1.414-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 010 1.414z"
                          clip-rule="evenodd" />
                      </svg>
                      <svg class="w-3 h-3 -mt-1" :class="getSortIcon('isActive', 'desc')" fill="currentColor"
                        viewBox="0 0 20 20">
                        <path fill-rule="evenodd"
                          d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                          clip-rule="evenodd" />
                      </svg>
                    </div>
                    <span x-show="sortFields.length > 1 && getSortPriority('isActive') > 0"
                      x-text="getSortPriority('isActive')"
                      class="w-4 h-4 bg-orange-600 text-white text-xs rounded-full flex items-center justify-center font-bold"
                      style="font-size: 10px;">
                    </span>
                  </div>
                </button>
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ações</th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200">
            <template x-for="coupon in coupons" :key="coupon.id">
              <tr>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm font-medium text-gray-900" x-text="coupon.code"></div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm text-gray-900" x-text="coupon.description"></div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full"
                    :class="coupon.discountType === 'PERCENTAGE' ? 'bg-blue-100 text-blue-800' : 'bg-green-100 text-green-800'"
                    x-text="coupon.discountType === 'PERCENTAGE' ? 'Porcentagem' : 'Valor Fixo'">
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  <span
                    x-text="coupon.discountType === 'PERCENTAGE' ? coupon.discountValue + '%' : 'R$ ' + coupon.discountValue"></span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  <span x-text="coupon.usageCount + (coupon.usageLimit ? '/' + coupon.usageLimit : '')"></span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full"
                    :class="coupon.isActive ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'"
                    x-text="coupon.isActive ? 'Ativo' : 'Inativo'">
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                  <button @click="openEditModal(coupon)"
                    class="text-orange-600 hover:text-orange-900 mr-3">Editar</button>
                  <button @click="deleteCoupon(coupon.id)" class="text-red-600 hover:text-red-900">Excluir</button>
                </td>
              </tr>
            </template>

            <!-- Empty state -->
            <tr x-show="coupons.length === 0">
              <td colspan="7" class="px-6 py-12 text-center text-gray-500">
                <div class="flex flex-col items-center">
                  <svg class="w-12 h-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                      d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                  </svg>
                  <p class="text-lg font-medium">Nenhum cupom encontrado</p>
                  <p class="text-sm">Altere os filtros para encontrar cupons</p>
                </div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>

      <!-- Pagination -->
      <div class="px-6 py-4 border-t border-gray-200">
        <div class="flex items-center justify-between">
          <div class="text-sm text-gray-700">
            Mostrando <span class="font-medium" x-text="pagination.from"></span> a <span class="font-medium"
              x-text="pagination.to"></span> de <span class="font-medium" x-text="pagination.total"></span> resultados
          </div>
          <div class="flex items-center space-x-2">
            <button @click="changePage(pagination.currentPage - 1)" :disabled="pagination.currentPage <= 1"
              class="flex items-center px-3 py-1 border border-gray-300 rounded-md text-sm text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
              <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
              </svg>
              Anterior
            </button>

            <template x-for="page in getVisiblePages()" :key="page">
              <button @click="changePage(page)"
                :class="page === pagination.currentPage ? 'px-3 py-1 bg-orange-600 text-white rounded-md text-sm' : 'px-3 py-1 border border-gray-300 rounded-md text-sm text-gray-500 hover:bg-gray-50'"
                x-text="page">
              </button>
            </template>

            <button @click="changePage(pagination.currentPage + 1)"
              :disabled="pagination.currentPage >= pagination.totalPages"
              class="flex items-center px-3 py-1 border border-gray-300 rounded-md text-sm text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
              Próximo
              <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
              </svg>
            </button>
          </div>
        </div>
      </div>
    </div>
  </template>

  <!-- Loading State -->
  <div x-show="loading" class="flex items-center justify-center h-64">
    <div class="text-center">
      <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-orange-600 mx-auto"></div>
      <p class="mt-4 text-gray-500">Carregando cupons...</p>
    </div>
  </div>
  <!-- Coupon Modal -->
  <div x-show="showModal" x-transition:enter="transition ease-out duration-300" x-transition:enter-start="opacity-0"
    x-transition:enter-end="opacity-100" x-transition:leave="transition ease-in duration-200"
    x-transition:leave-start="opacity-100" x-transition:leave-end="opacity-0" class="fixed inset-0 z-50 overflow-y-auto"
    x-cloak>
    <div class="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
      <!-- Background overlay -->
      <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" @click="closeModal()"></div>

      <!-- Modal panel -->
      <div
        class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-4xl sm:w-full">
        <form @submit.prevent="saveCoupon()">
          <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
            <div class="sm:flex sm:items-start">
              <div class="w-full">
                <h3 class="text-lg leading-6 font-medium text-gray-900 mb-6"
                  x-text="isEditing ? 'Editar Cupom' : 'Criar Cupom'"></h3>

                <div class="space-y-8">
                  <!-- Seção 1: Informações Básicas -->
                  <div class="bg-gray-50 p-4 rounded-lg">
                    <h4 class="text-sm font-semibold text-gray-800 mb-4 flex items-center">
                      <svg class="w-4 h-4 mr-2 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                          d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                      Informações Básicas
                    </h4>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <!-- Código -->
                      <div class="space-y-1">
                        <label for="code" class="block text-sm font-medium text-gray-700">
                          Código
                          <span class="text-red-500">*</span>
                        </label>
                        <input type="text" id="code" name="code" x-model="form.code" :disabled="isEditing"
                          placeholder="Ex: DESCONTO10" required
                          class="block w-full px-3 py-2.5 border border-gray-300 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-colors duration-200 disabled:bg-gray-50 disabled:cursor-not-allowed" />
                      </div>

                      <!-- Tipo de Desconto -->
                      <div class="space-y-1">
                        <label for="discountType" class="block text-sm font-medium text-gray-700">
                          Tipo de Desconto
                          <span class="text-red-500">*</span>
                        </label>
                        <div class="relative">
                          <select id="discountType" name="discountType" x-model="form.discountType" required
                            class="block w-full px-3 py-2.5 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-colors duration-200 appearance-none bg-white">
                            <option value="" disabled>Selecione o tipo</option>
                            <option value="PERCENTAGE">Porcentagem</option>
                            <option value="FIXED_AMOUNT">Valor Fixo</option>
                          </select>
                          <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                            <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M19 9l-7 7-7-7" />
                            </svg>
                          </div>
                        </div>
                      </div>
                    </div>

                    <!-- Descrição -->
                    <div class="mt-4 space-y-1">
                      <label for="description" class="block text-sm font-medium text-gray-700">
                        Descrição
                        <span class="text-red-500">*</span>
                      </label>
                      <textarea id="description" name="description" x-model="form.description" rows="3"
                        placeholder="Descreva o cupom..." required
                        class="block w-full px-3 py-2.5 border border-gray-300 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-colors duration-200 resize-vertical"></textarea>
                    </div>
                  </div>

                  <!-- Seção 2: Valores e Limites -->
                  <div class="bg-gray-50 p-4 rounded-lg">
                    <h4 class="text-sm font-semibold text-gray-800 mb-4 flex items-center">
                      <svg class="w-4 h-4 mr-2 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                          d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1" />
                      </svg>
                      Valores e Limites
                    </h4>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <!-- Valor do Desconto -->
                      <div class="space-y-1">
                        <label for="discountValue" class="block text-sm font-medium text-gray-700">
                          Valor do Desconto
                          <span class="text-red-500">*</span>
                        </label>
                        <div class="relative">
                          <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <span class="text-gray-500 text-sm"
                              x-text="form.discountType === 'PERCENTAGE' ? '%' : 'R$'"></span>
                          </div>
                          <input type="number" id="discountValue" name="discountValue" x-model="form.discountValue"
                            step="0.01" min="0" placeholder="0.00" required
                            class="block w-full pl-8 pr-3 py-2.5 border border-gray-300 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-colors duration-200" />
                        </div>
                      </div>

                      <!-- Valor Mínimo do Pedido -->
                      <div class="space-y-1">
                        <label for="minimumOrderValue" class="block text-sm font-medium text-gray-700">
                          Valor Mínimo do Pedido
                          <span class="text-red-500">*</span>
                        </label>
                        <div class="relative">
                          <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <span class="text-gray-500 text-sm">R$</span>
                          </div>
                          <input type="number" id="minimumOrderValue" name="minimumOrderValue"
                            x-model="form.minimumOrderValue" step="0.01" min="0" placeholder="0.00" required
                            class="block w-full pl-8 pr-3 py-2.5 border border-gray-300 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-colors duration-200" />
                        </div>
                      </div>

                      <div class="space-y-1">
                        <label for="maximumDiscount" class="block text-sm font-medium text-gray-700">
                          Desconto Máximo
                        </label>
                        <div class="relative">
                          <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <span class="text-gray-500 text-sm">R$</span>
                          </div>
                          <input type="number" id="maximumDiscount" name="maximumDiscount"
                            x-model="form.maximumDiscount" step="0.01" min="0" placeholder="Opcional"
                            class="block w-full pl-8 pr-3 py-2.5 border border-gray-300 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-colors duration-200" />
                        </div>
                      </div>

                      <div class="space-y-1">
                        <label for="usageLimit" class="block text-sm font-medium text-gray-700">
                          Limite de Uso
                        </label>
                        <input type="number" id="usageLimit" name="usageLimit" x-model="form.usageLimit" min="1"
                          placeholder="Opcional"
                          class="block w-full px-3 py-2.5 border border-gray-300 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-colors duration-200" />
                      </div>
                    </div>
                  </div>

                  <div class="bg-gray-50 p-4 rounded-lg">
                    <h4 class="text-sm font-semibold text-gray-800 mb-4 flex items-center">
                      <svg class="w-4 h-4 mr-2 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                          d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                      </svg>
                      Período de Validade
                    </h4>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div class="space-y-1">
                        <label for="validFrom" class="block text-sm font-medium text-gray-700">
                          Válido de
                          <span class="text-red-500">*</span>
                        </label>
                        <div class="relative">
                          <input type="datetime-local" id="validFrom" name="validFrom" x-model="form.validFrom" required
                            class="block w-full px-3 py-2.5 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-colors duration-200" />
                          <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                            <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                            </svg>
                          </div>
                        </div>
                      </div>
                      <div class="space-y-1">
                        <label for="validUntil" class="block text-sm font-medium text-gray-700">
                          Válido até
                          <span class="text-red-500">*</span>
                        </label>
                        <div class="relative">
                          <input type="datetime-local" id="validUntil" name="validUntil" x-model="form.validUntil"
                            required
                            class="block w-full px-3 py-2.5 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-colors duration-200" />
                          <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                            <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                            </svg>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>

                  <!-- Seção 4: Status -->
                  <div class="bg-gray-50 p-4 rounded-lg">
                    <h4 class="text-sm font-semibold text-gray-800 mb-4 flex items-center">
                      <svg class="w-4 h-4 mr-2 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                          d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                      Status do Cupom
                    </h4>
                    <div class="flex items-start">
                      <div class="flex items-center h-5">
                        <input type="checkbox" id="isActive" name="isActive" x-model="form.isActive"
                          class="h-4 w-4 text-orange-600 focus:ring-orange-500 border-gray-300 rounded transition-colors duration-200" />
                      </div>
                      <div class="ml-3 text-sm">
                        <label for="isActive" class="font-medium text-gray-700 cursor-pointer">
                          Cupom ativo
                        </label>
                        <p class="text-gray-500 text-xs mt-1">Desmarque para desativar o cupom</p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
            <button type="submit" :disabled="saving"
              class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-orange-600 text-base font-medium text-white hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 sm:ml-3 sm:w-auto sm:text-sm disabled:opacity-50">
              <span x-show="!saving" x-text="isEditing ? 'Salvar Alterações' : 'Criar Cupom'"></span>
              <span x-show="saving">Salvando...</span>
            </button>
            <button type="button" @click="closeModal()"
              class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
              Cancelar
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>


<script>
  function couponManager() {
    return {
      // State
      loading: true,
      coupons: [],
      stats: {
        total: 0,
        active: 0,
        expiringIn7Days: 0,
        usagesThisMonth: 0
      },
      pagination: {
        currentPage: 1,
        totalPages: 1,
        total: 0,
        from: 0,
        to: 0
      },
      searchQuery: '',
      statusFilter: '',
      sortFields: [], // Array para armazenar campos de ordenação
      showModal: false,
      isEditing: false,
      saving: false,
      editingId: null,
      form: {
        code: '',
        description: '',
        discountType: '',
        discountValue: '',
        minimumOrderValue: '',
        maximumDiscount: '',
        usageLimit: '',
        validFrom: '',
        validUntil: '',
        isActive: true
      },

      // Methods
      async init() {
        await Promise.all([
          this.loadCoupons(),
          this.loadStats()
        ]);
      },

      async loadCoupons() {
        try {
          const params = new URLSearchParams({
            page: this.pagination.currentPage,
            itemsPerPage: 10
          });

          if (this.searchQuery) params.append('name', this.searchQuery);
          if (this.statusFilter) params.append('active', this.statusFilter);

          // Adicionar parâmetro de ordenação
          const sortParam = this.buildSortParam();
          if (sortParam) params.append('sort', sortParam);

          const response = await fetch(`/api/coupons?${params}`);
          const data = await response.json();

          if (data.data) {
            // O controller retorna { data: coupons, pagination: {...} }
            this.coupons = data.data.data || [];
            this.pagination = {
              currentPage: data.pagination.page || 1,
              totalPages: data.pagination.totalPages || 1,
              total: data.pagination.total || 0,
              from: data.pagination.page ? ((data.pagination.page - 1) * 10) + 1 : 1,
              to: data.pagination.page ? Math.min(data.pagination.page * 10, data.pagination.total || 0) : 0
            };
          } else {
            this.coupons = [];
            this.pagination = {
              currentPage: 1,
              totalPages: 1,
              total: 0,
              from: 0,
              to: 0
            };
          }

        } catch (error) {
          console.error('Erro ao carregar cupons:', error);
        } finally {
          this.loading = false;
        }
      },

      async loadStats() {
        try {
          const response = await fetch('/api/coupons/summary');
          const data = await response.json();
          this.stats = data;
        } catch (error) {
          console.error('Erro ao carregar estatísticas:', error);
        }
      },

      async searchCoupons() {
        this.pagination.currentPage = 1;
        await this.loadCoupons();
      },

      async changePage(page) {
        if (page >= 1 && page <= this.pagination.totalPages) {
          this.pagination.currentPage = page;
          await this.loadCoupons();
        }
      },

      getVisiblePages() {
        const current = this.pagination.currentPage;
        const total = this.pagination.totalPages;
        const pages = [];

        const start = Math.max(1, current - 2);
        const end = Math.min(total, current + 2);

        for (let i = start; i <= end; i++) {
          pages.push(i);
        }

        return pages;
      },

      openCreateModal() {
        this.isEditing = false;
        this.editingId = null;
        this.form = {
          code: '',
          description: '',
          discountType: '',
          discountValue: '',
          minimumOrderValue: '',
          maximumDiscount: '',
          usageLimit: '',
          validFrom: '',
          validUntil: '',
          isActive: true
        };
        this.showModal = true;
      },

      openEditModal(coupon) {
        this.isEditing = true;
        this.editingId = coupon.id;
        this.form = {
          code: coupon.code,
          description: coupon.description,
          discountType: coupon.discountType,
          discountValue: coupon.discountValue,
          minimumOrderValue: coupon.minimumOrderValue,
          maximumDiscount: coupon.maximumDiscount || '',
          usageLimit: coupon.usageLimit || '',
          validFrom: this.formatDateForInput(coupon.validFrom),
          validUntil: this.formatDateForInput(coupon.validUntil),
          isActive: coupon.isActive
        };
        this.showModal = true;
      },

      closeModal() {
        this.showModal = false;
        this.saving = false;
      },

      async saveCoupon() {
        this.saving = true;
        try {
          const url = this.isEditing
            ? `/api/coupons/${this.editingId}`
            : '/api/coupons';

          const method = this.isEditing ? 'PATCH' : 'POST';

          const response = await fetch(url, {
            method,
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
            },
            body: JSON.stringify({
              ...this.form,
              validFrom: this.form.validFrom ? new Date(this.form.validFrom).toISOString() : null,
              validUntil: this.form.validUntil ? new Date(this.form.validUntil).toISOString() : null
            })
          });

          if (response.ok) {
            this.closeModal();
            await this.loadCoupons();
            await this.loadStats();
          } else {
            const error = await response.json();
            alert('Erro ao salvar cupom: ' + (error.message || 'Erro desconhecido'));
          }
        } catch (error) {
          console.error('Erro ao salvar cupom:', error);
          alert('Erro ao salvar cupom');
        } finally {
          this.saving = false;
        }
      },

      async deleteCoupon(id) {
        if (confirm('Tem certeza que deseja excluir este cupom?')) {
          try {
            const response = await fetch(`/api/coupons/${id}`, {
              method: 'DELETE',
              headers: {
                'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
              }
            });

            if (response.ok) {
              await this.loadCoupons();
              await this.loadStats();
            } else {
              alert('Erro ao excluir cupom');
            }
          } catch (error) {
            console.error('Erro ao excluir cupom:', error);
            alert('Erro ao excluir cupom');
          }
        }
      },

      formatDateForInput(dateString) {
        const date = new Date(dateString);
        return date.toISOString().slice(0, 16);
      },

      // Métodos de ordenação
      toggleSort(field) {
        const existingIndex = this.sortFields.findIndex(sort => sort.field === field);

        if (existingIndex !== -1) {
          // Campo já existe, alternar direção
          const currentSort = this.sortFields[existingIndex];
          if (currentSort.direction === 'asc') {
            this.sortFields[existingIndex] = { field, direction: 'desc' };
          } else if (currentSort.direction === 'desc') {
            // Remover da ordenação
            this.sortFields.splice(existingIndex, 1);
          }
        } else {
          // Adicionar novo campo de ordenação
          this.sortFields.push({ field, direction: 'asc' });
        }

        // Recarregar dados com nova ordenação
        this.loadCoupons();
      },

      getSortIcon(field, direction) {
        const sortField = this.sortFields.find(sort => sort.field === field);
        if (sortField && sortField.direction === direction) {
          return 'text-orange-600';
        }
        return 'text-gray-300';
      },

      getSortPriority(field) {
        const index = this.sortFields.findIndex(sort => sort.field === field);
        return index + 1; // Retorna 1 para primeiro, 2 para segundo, etc. 0 se não encontrado
      },

      buildSortParam() {
        if (this.sortFields.length === 0) return '';

        return this.sortFields.map(sort => {
          return sort.direction === 'desc' ? `-${sort.field}` : sort.field;
        }).join(',');
      }
    }
  }
</script>
@endslot
@end