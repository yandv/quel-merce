@layout.app()
  @slot('main')
    <div x-data="HomeFetcher()" x-init="loadData()" class="flex flex-col h-screen">
      <!-- Header -->
      @include('components/header')

      <div class="flex flex-1 overflow-hidden">
        <!-- Sidebar -->
        <aside class="w-64 bg-gray-100 border-r overflow-y-auto px-4 py-2">
          <h2 class="text-lg font-semibold mb-2">
            Filtros
          </h2>

          <div class="max-w-2xl mx-auto space-y-2">
            <input
              type="text"
              placeholder="Digite a placa do carro"
              class="w-full px-4 py-1 border rounded-lg shadow-sm focus:ring-2 focus:ring-orange-400 focus:outline-none"
            />
          </div>

          <!-- Loading -->
          <template x-if="isLoadingCategories">
            <p class="mt-4 text-sm text-gray-500">
              Carregando categorias...
            </p>
          </template>

          <!-- Categorias -->
          <ul class="space-y-2 mt-3" x-show="!isLoadingCategories">
            <template x-for="cat in categories" :key="cat.id">
              <li>
                <label class="flex items-center space-x-2">
                  <input type="checkbox" class="rounded text-orange-500" />
                  <span class="font-medium" x-text="cat.name"></span>
                </label>

                <!-- Subcategorias -->
                <ul class="ml-6 mt-2 space-y-1" x-show="cat.children.length > 0">
                  <template x-for="child in cat.children" :key="child.id">
                    <li>
                      <label class="flex items-center space-x-2">
                        <input type="checkbox" class="rounded text-orange-500" />
                        <span x-text="child.name"></span>
                      </label>
                    </li>
                  </template>
                </ul>
              </li>
            </template>
          </ul>
        </aside>

        <!-- Main Content -->
        <main class="flex-1 px-8 py-2 overflow-y-auto">
          <!-- Resultados -->
          <section x-show="!isLoadingProducts">
            <div class="flex items-center justify-between mb-4">
              <h3 class="text-xl font-semibold mb-4">
                Resultados
              </h3>

              <div class="relative">
                <label for="ordenar" class="mr-2 text-sm font-medium text-gray-700">Ordenar por:</label>
                <select
                  id="ordenar"
                  class="appearance-none px-2 py-1 pr-8 border border-gray-300 rounded-lg bg-white shadow-sm text-sm focus:ring-2 focus:ring-orange-400 focus:border-orange-400 focus:outline-none cursor-pointer"
                >
                  <option value="nome">
                    Nome
                  </option>
                  <option value="preco">
                    Preço
                  </option>
                </select>
                <div class="pointer-events-none absolute inset-y-0 right-2 flex items-center text-gray-500">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M19 9l-7 7-7-7" />
                  </svg>
                </div>
              </div>
            </div>

            <div class="grid grid-cols-2 md:grid-cols-4 gap-6" x-show="products.length > 0">
              <template x-for="product in products" :key="product.id">
                <div class="border rounded-lg p-4 shadow hover:shadow-md transition">
                  <h4 class="font-medium">
                    <span x-text="product.name"></span>
                  </h4>
                  <img
                    class="w-full h-40 object-cover rounded-lg"
                    x-bind:src="product.thumbnailUrl"
                    x-show="product.thumbnailUrl"
                  />
                  <p class="text-sm text-gray-500" x-show="product.years?.length > 0">
                    Compatível com: <span x-text="product.years?.map(year => year.model.brand.name).join(', ')"></span>
                  </p>
                  <p class="text-sm text-gray-500" x-show="product.description">
                    <span x-text="product.description"></span>
                  </p>
                  <p class="text-sm text-gray-500 mt-2" x-show="product.price">
                    R$ <span x-text="product.price.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })"></span>
                  </p>
                  <a
                    class="inline-block text-center mt-2 w-full bg-blue-500 text-white py-2 rounded-lg hover:bg-blue-600"
                    x-bind:href="`/products/${product.id}`"
                  >
                    Ver detalhes
                  </a>
                  <button
                    class="mt-2 w-full bg-orange-500 text-white py-2 rounded-lg hover:bg-orange-600"
                    @click="() => {
                      $store.cart.addItem(product)
                      $store.toast.toast('Produto adicionado ao carrinho', 'success')
                    }"
                  >Adicionar ao carrinho</button>
                </div>
              </template>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-3 gap-6" x-show="products.length === 0">
              <p class="text-center text-gray-500">
                Nenhum resultado encontrado
              </p>
            </div>

            <div
              class="sticky bottom-0 left-0 right-0 bg-white border-t py-3 mt-6 flex items-center justify-between space-x-4"
            >
              <!-- Botões -->
              <div class="flex items-center space-x-2">
                <button
                  class="px-3 py-1 border rounded-lg bg-gray-100 hover:bg-gray-200"
                  :disabled="page === 1"
                  @click="changePage(page - 1)"
                >Anterior</button>

                <span class="text-sm">Página <span x-text="page"></span>{{ ' de ' }}<span x-text="totalPages"></span></span>

                <button
                  class="px-3 py-1 border rounded-lg bg-gray-100 hover:bg-gray-200"
                  :disabled="page === totalPages"
                  @click="changePage(page + 1)"
                >Próxima</button>
              </div>

              <!-- Select -->
              <div class="flex items-center space-x-2">
                <label for="limit" class="text-sm font-medium text-gray-700">Itens por página:</label>
                <select
                  id="limit"
                  x-model="limit"
                  @change="changeLimit(parseInt($event.target.value))"
                  class="appearance-none px-2 py-1 pr-8 border border-gray-300 rounded-lg bg-white shadow-sm text-sm focus:ring-2 focus:ring-orange-400 focus:border-orange-400 focus:outline-none cursor-pointer"
                >
                  <option value="10">
                    10
                  </option>
                  <option value="20">
                    20
                  </option>
                  <option value="30">
                    30
                  </option>
                  <option value="50">
                    50
                  </option>
                </select>
              </div>
            </div>
          </section>
        </main>
      </div>
    </div>

    <script>
      function HomeFetcher() {
        return {
          products: [],
          categories: [],
          isLoadingCategories: true,
          isLoadingProducts: true,
          // paginação
          page: 1,
          limit: 20,
          totalPages: 1,
          total: 0,
          // busca
          search: "",
          debounceTimer: null,
          async loadData() {
            await Promise.all([ this.loadCategories(), this.loadProducts() ]);
          },
          async loadCategories() {
            const categories = await fetch("/api/categories");
            if (categories.ok) {
              const data = await categories.json();
              this.categories = data;
              this.isLoadingCategories = false;
            }
          },
          async loadProducts() {
            try {
              this.isLoadingProducts = true;
              const params = new URLSearchParams(window.location.search);
              this.page = parseInt(params.get("page")) || 1;
              this.limit = parseInt(params.get("limit")) || 20;
              this.search = params.get("search") || "";
              const offset = (this.page - 1) * this.limit;
              const query = `/api/products?offset=${offset}&limit=${this.limit}&name=${encodeURIComponent(this.search)}`;
              const products = await fetch(query);
              if (products.ok) {
                const data = await products.json();
                this.products = data.data;
                this.total = data.cursor.total;
                this.limit = data.cursor.limit;
                this.page = Math.floor(data.cursor.offset / data.cursor.limit) + 1;
                this.totalPages = Math.ceil(this.total / this.limit);
              }
            } catch (err) {
              console.error("Erro ao carregar produtos", err);
            } finally {
              this.isLoadingProducts = false;
            }
          },
          changePage(newPage) {
            if (newPage < 1 || newPage > this.totalPages) return;
            this.page = newPage;
            this.updateUrl();
            this.loadProducts();
          },
          changeLimit(newLimit) {
            this.limit = newLimit;
            this.page = 1; // resetar sempre
            this.updateUrl();
            this.loadProducts();
          },
          // chamada quando usuário digita
          onSearchInput(event) {
            clearTimeout(this.debounceTimer);
            this.search = event.target.value;
            this.debounceTimer = setTimeout(() => {
              this.page = 1;
              this.updateUrl();
              this.loadProducts();
            }, 200);
          },
          // chamada quando aperta Enter
          onSearchEnter() {
            clearTimeout(this.debounceTimer);
            this.page = 1;
            this.updateUrl();
            this.loadProducts();
          },
          updateUrl() {
            const params = new URLSearchParams(window.location.search);
            params.set("page", this.page);
            params.set("limit", this.limit);
            params.set("search", this.search);
            history.pushState({}, "", `${window.location.pathname}?${params.toString()}`);
          }
        };
      }
    </script>
  @endslot
@end
